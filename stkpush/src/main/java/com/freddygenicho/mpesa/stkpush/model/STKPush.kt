package com.freddygenicho.mpesa.stkpush.model

import android.util.Base64
import com.google.gson.annotations.SerializedName
import com.google.gson.annotations.Expose
import com.freddygenicho.mpesa.stkpush.model.STKPush
import com.google.gson.Gson
import java.text.SimpleDateFormat
import java.util.*

/**
 * @author Fredrick Ochieng on 02/02/2018.
 */
class STKPush {
    @SerializedName("BusinessShortCode")
    @Expose
    var businessShortCode: String? = null

    @SerializedName("Password")
    @Expose
    var password: String? = null

    @SerializedName("Timestamp")
    @Expose
    private var timestamp: String? = null

    @SerializedName("TransactionType")
    @Expose
    var transactionType: String? = null

    @SerializedName("Amount")
    @Expose
    var amount: String? = null

    @SerializedName("PartyA")
    @Expose
    var partyA: String? = null

    @SerializedName("PartyB")
    @Expose
    var partyB: String? = null

    @SerializedName("PhoneNumber")
    @Expose
    var phoneNumber: String? = null

    @SerializedName("CallBackURL")
    @Expose
    var callBackURL: String? = null

    @SerializedName("AccountReference")
    @Expose
    var accountReference: String? = null

    @SerializedName("TransactionDesc")
    @Expose
    var transactionDesc: String? = null

    constructor() {}

    /**
     * @param businessShortCode - The organization shortcode used to receive the transaction.
     * @param password          - The password for encrypting the request. This is generated by base64 encoding
     * @param timestamp         - The timestamp of the transaction in the format yyyymmddhhiiss.
     * @param transactionType   - The transaction type to be used for this request. Only CustomerPayBillOnline is supported.
     * @param amount            - The amount to be transacted.
     * @param partyA            - The MSISDN sending the funds.
     * @param partyB            - 	The organization shortcode receiving the funds
     * @param phoneNumber       - The MSISDN sending the funds.
     * @param callBackURL       - The url to where responses from M-Pesa will be sent to.
     * @param accountReference  - Used with M-Pesa PayBills.
     * @param transactionDesc   - A description of the transaction.
     */
    constructor(
        businessShortCode: String?,
        password: String?,
        timestamp: String?,
        transactionType: String?,
        amount: String?,
        partyA: String?,
        partyB: String?,
        phoneNumber: String?,
        callBackURL: String?,
        accountReference: String?,
        transactionDesc: String?
    ) {
        this.businessShortCode = businessShortCode
        this.password = password
        this.timestamp = timestamp
        this.transactionType = transactionType
        this.amount = amount
        this.partyA = partyA
        this.partyB = partyB
        this.phoneNumber = phoneNumber
        this.callBackURL = callBackURL
        this.accountReference = accountReference
        this.transactionDesc = transactionDesc
    }

    fun setTimestamp(timestamp: String?) {
        this.timestamp = timestamp
    }

    override fun toString(): String {
        return "{\"BusinessShortCode\":\"" + businessShortCode + "\"," +
                "\"Password\":\"" + password + "\"," +
                "\"Timestamp\":\"" + timestamp + "\"," +
                "\"TransactionType\":\"" + transactionType + "\"," +
                "\"Amount\":\"" + amount + "\"," +
                "\"PartyA\":\"" + partyA + "\"," +
                "\"PartyB\":\"" + partyB + "\"," +
                "\"PhoneNumber\":\"" + phoneNumber + "\"," +
                "\"CallBackURL\":\"" + callBackURL + "\"," +
                "\"AccountReference\":\"" + accountReference + "\"," +
                "\"TransactionDesc\":\"" + transactionDesc +
                "\"}"
    }

    fun toJson(stkPush: STKPush?): String {
        val gson = Gson()
        return gson.toJson(stkPush)
    }

    companion object {
        fun sanitizePhoneNumber(phone: String): String {
            if (phone == "") {
                return ""
            }
            if (phone.length < 11 && phone.startsWith("0")) {
                return phone.replaceFirst("^0".toRegex(), "254")
            }
            return if (phone.length == 13 && phone.startsWith("+")) {
                phone.replaceFirst("^+".toRegex(), "")
            } else phone
        }

        fun getPassword(businessShortCode: String, passkey: String, timestamp: String): String {
            val str = businessShortCode + passkey + timestamp
            //encode the password to Base64
            return Base64.encodeToString(str.toByteArray(), Base64.NO_WRAP)
        }

        fun getTimestamp(): String {
            return SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault()).format(Date())
        }
    }
}